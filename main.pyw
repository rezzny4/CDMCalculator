# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1070,800)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("pics\logo2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color:#1BD5AF")
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 1070, 800))
        self.stackedWidget.setObjectName("stackedWidget")
        self.home = QtWidgets.QWidget()
        self.home.setStyleSheet("")
        self.home.setObjectName("home")
        self.btn2 = QtWidgets.QPushButton(self.home)
        self.btn2.setGeometry(QtCore.QRect(335, 500, 400, 75))
        font = QtGui.QFont()
        font.setPointSize(26)
        self.btn2.setFont(font)
        self.btn2.setStyleSheet("border: 2px solid white; \n"
"color: white;\n"
"border-radius: 30;\n"
"    ")
        self.btn2.setObjectName("btn2")
        self.btn1 = QtWidgets.QPushButton(self.home)
        self.btn1.setGeometry(QtCore.QRect(335, 400, 400, 75))
        font = QtGui.QFont()
        font.setPointSize(26)
        self.btn1.setFont(font)
        self.btn1.setStyleSheet("border: 2px solid white; \n"
"color: white;\n"
"border-radius: 30;\n"
"    ")
        self.btn1.setObjectName("btn1")
        self.label2 = QtWidgets.QLabel(self.home)
        self.label2.setGeometry(QtCore.QRect(135, 250, 800, 100))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label2.setFont(font)
        self.label2.setStyleSheet("color:white")
        self.label2.setAlignment(QtCore.Qt.AlignCenter)
        self.label2.setObjectName("label2")
        self.label1 = QtWidgets.QLabel(self.home)
        self.label1.setGeometry(QtCore.QRect(135, 50, 800, 200))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(64)
        self.label1.setFont(font)
        self.label1.setText("")
        self.label1.setPixmap(QtGui.QPixmap("pics\logo1.png"))
        self.label1.setAlignment(QtCore.Qt.AlignCenter)
        self.label1.setObjectName("label1")
        self.offButton = QtWidgets.QPushButton(self.home)
        self.offButton.setGeometry(QtCore.QRect(510, 600, 50, 50))
        self.offButton.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.offButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("pics\off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.offButton.setIcon(icon1)
        self.offButton.setObjectName("offButton")
        self.stackedWidget.addWidget(self.home)
        self.Bool = QtWidgets.QWidget()
        self.Bool.setObjectName("Bool")
        self.stroka_2 = QtWidgets.QLabel(self.Bool)
        self.stroka_2.setGeometry(QtCore.QRect(155, 190, 760, 70))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(28)
        font.setBold(True)
        font.setWeight(75)
        self.stroka_2.setFont(font)
        self.stroka_2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10")
        self.stroka_2.setText("")
        self.stroka_2.setTextFormat(QtCore.Qt.PlainText)
        self.stroka_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.stroka_2.setObjectName("stroka_2")
        self.VarA = QtWidgets.QPushButton(self.Bool)
        self.VarA.setGeometry(QtCore.QRect(155, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.VarA.setFont(font)
        self.VarA.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.VarA.setObjectName("VarA")
        self.VarB = QtWidgets.QPushButton(self.Bool)
        self.VarB.setGeometry(QtCore.QRect(245, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.VarB.setFont(font)
        self.VarB.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.VarB.setObjectName("VarB")
        self.VarC = QtWidgets.QPushButton(self.Bool)
        self.VarC.setGeometry(QtCore.QRect(335, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.VarC.setFont(font)
        self.VarC.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.VarC.setObjectName("VarC")
        self.arg1_2 = QtWidgets.QPushButton(self.Bool)
        self.arg1_2.setGeometry(QtCore.QRect(425, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.arg1_2.setFont(font)
        self.arg1_2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.arg1_2.setObjectName("arg1_2")
        self.VarD = QtWidgets.QPushButton(self.Bool)
        self.VarD.setGeometry(QtCore.QRect(155, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.VarD.setFont(font)
        self.VarD.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.VarD.setObjectName("VarD")
        self.VarE = QtWidgets.QPushButton(self.Bool)
        self.VarE.setGeometry(QtCore.QRect(245, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.VarE.setFont(font)
        self.VarE.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.VarE.setObjectName("VarE")
        self.VarF = QtWidgets.QPushButton(self.Bool)
        self.VarF.setGeometry(QtCore.QRect(335, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        font.setBold(False)
        font.setWeight(50)
        self.VarF.setFont(font)
        self.VarF.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.VarF.setObjectName("VarF")
        self.Negation = QtWidgets.QPushButton(self.Bool)
        self.Negation.setGeometry(QtCore.QRect(155, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Negation.setFont(font)
        self.Negation.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Negation.setObjectName("Negation")
        self.Disj = QtWidgets.QPushButton(self.Bool)
        self.Disj.setGeometry(QtCore.QRect(245, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Disj.setFont(font)
        self.Disj.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Disj.setObjectName("Disj")
        self.Conj = QtWidgets.QPushButton(self.Bool)
        self.Conj.setGeometry(QtCore.QRect(335, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Conj.setFont(font)
        self.Conj.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Conj.setObjectName("Conj")
        self.equal_2 = QtWidgets.QPushButton(self.Bool)
        self.equal_2.setGeometry(QtCore.QRect(425, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.equal_2.setFont(font)
        self.equal_2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.equal_2.setObjectName("equal_2")
        self.zapros_2 = QtWidgets.QLabel(self.Bool)
        self.zapros_2.setGeometry(QtCore.QRect(515, 260, 400, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.zapros_2.setFont(font)
        self.zapros_2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.zapros_2.setText("")
        self.zapros_2.setAlignment(QtCore.Qt.AlignCenter)
        self.zapros_2.setObjectName("zapros_2")
        self.arg2_2 = QtWidgets.QPushButton(self.Bool)
        self.arg2_2.setGeometry(QtCore.QRect(425, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.arg2_2.setFont(font)
        self.arg2_2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.arg2_2.setObjectName("arg2_2")
        self.Val1 = QtWidgets.QPushButton(self.Bool)
        self.Val1.setGeometry(QtCore.QRect(515, 350, 200, 180))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Val1.setFont(font)
        self.Val1.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Val1.setObjectName("Val1")
        self.Val0 = QtWidgets.QPushButton(self.Bool)
        self.Val0.setGeometry(QtCore.QRect(715, 350, 200, 180))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Val0.setFont(font)
        self.Val0.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Val0.setObjectName("Val0")
        self.Reset2 = QtWidgets.QPushButton(self.Bool)
        self.Reset2.setGeometry(QtCore.QRect(715, 530, 200, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Reset2.setFont(font)
        self.Reset2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Reset2.setObjectName("Reset2")
        self.Home = QtWidgets.QPushButton(self.Bool)
        self.Home.setGeometry(QtCore.QRect(515, 530, 200, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(14)
        self.Home.setFont(font)
        self.Home.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Home.setObjectName("Home")
        self.stackedWidget.addWidget(self.Bool)
        self.Sets = QtWidgets.QWidget()
        self.Sets.setObjectName("Sets")
        self.zapros = QtWidgets.QLabel(self.Sets)
        self.zapros.setGeometry(QtCore.QRect(515, 260, 400, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.zapros.setFont(font)
        self.zapros.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.zapros.setText("")
        self.zapros.setAlignment(QtCore.Qt.AlignCenter)
        self.zapros.setObjectName("zapros")
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        font.setBold(True)
        font.setWeight(75)
        self.vvod = QtWidgets.QLineEdit(self.Sets)
        self.vvod.setFont(font)
        self.vvod.setGeometry(QtCore.QRect(515, 350, 400, 90))
        self.vvod.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.vvod.setObjectName("vvod")
        self.stroka = QtWidgets.QLabel(self.Sets)
        self.stroka.setGeometry(QtCore.QRect(155, 190, 760, 70))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(28)
        font.setBold(True)
        font.setWeight(75)
        self.stroka.setFont(font)
        self.stroka.setStyleSheet("color:white; border: 2px solid white; border-radius: 10")
        self.stroka.setText("")
        self.stroka.setTextFormat(QtCore.Qt.PlainText)
        self.stroka.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.stroka.setObjectName("stroka")
        self.SetA = QtWidgets.QPushButton(self.Sets)
        self.SetA.setGeometry(QtCore.QRect(155, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.SetA.setFont(font)
        self.SetA.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.SetA.setObjectName("SetA")
        self.SetB = QtWidgets.QPushButton(self.Sets)
        self.SetB.setGeometry(QtCore.QRect(245, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.SetB.setFont(font)
        self.SetB.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.SetB.setObjectName("SetB")
        self.SetC = QtWidgets.QPushButton(self.Sets)
        self.SetC.setGeometry(QtCore.QRect(335, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.SetC.setFont(font)
        self.SetC.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.SetC.setObjectName("SetC")
        self.SetD = QtWidgets.QPushButton(self.Sets)
        self.SetD.setGeometry(QtCore.QRect(155, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.SetD.setFont(font)
        self.SetD.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.SetD.setObjectName("SetD")
        self.SetE = QtWidgets.QPushButton(self.Sets)
        self.SetE.setGeometry(QtCore.QRect(245, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.SetE.setFont(font)
        self.SetE.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.SetE.setObjectName("SetE")
        self.SetF = QtWidgets.QPushButton(self.Sets)
        self.SetF.setGeometry(QtCore.QRect(335, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        font.setBold(False)
        font.setWeight(50)
        self.SetF.setFont(font)
        self.SetF.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.SetF.setObjectName("SetF")
        self.Complement = QtWidgets.QPushButton(self.Sets)
        self.Complement.setGeometry(QtCore.QRect(155, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Complement.setFont(font)
        self.Complement.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Complement.setObjectName("Complement")
        self.Union = QtWidgets.QPushButton(self.Sets)
        self.Union.setGeometry(QtCore.QRect(245, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Union.setFont(font)
        self.Union.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Union.setObjectName("Union")
        self.Intersection = QtWidgets.QPushButton(self.Sets)
        self.Intersection.setGeometry(QtCore.QRect(335, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Intersection.setFont(font)
        self.Intersection.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Intersection.setObjectName("Intersection")
        self.arg1 = QtWidgets.QPushButton(self.Sets)
        self.arg1.setGeometry(QtCore.QRect(425, 260, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.arg1.setFont(font)
        self.arg1.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.arg1.setObjectName("arg1")
        self.arg2 = QtWidgets.QPushButton(self.Sets)
        self.arg2.setGeometry(QtCore.QRect(425, 350, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.arg2.setFont(font)
        self.arg2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.arg2.setObjectName("arg2")
        self.minus = QtWidgets.QPushButton(self.Sets)
        self.minus.setGeometry(QtCore.QRect(425, 440, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.minus.setFont(font)
        self.minus.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.minus.setObjectName("minus")
        self.equal = QtWidgets.QPushButton(self.Sets)
        self.equal.setGeometry(QtCore.QRect(425, 530, 90, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.equal.setFont(font)
        self.equal.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.equal.setObjectName("equal")
        self.Home_2 = QtWidgets.QPushButton(self.Sets)
        self.Home_2.setGeometry(QtCore.QRect(515, 440, 200, 180))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(14)
        self.Home_2.setFont(font)
        self.Home_2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Home_2.setObjectName("Home_2")
        self.Reset = QtWidgets.QPushButton(self.Sets)
        self.Reset.setGeometry(QtCore.QRect(715, 440, 200, 180))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Reset.setFont(font)
        self.Reset.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Reset.setObjectName("Reset")
        self.Del = QtWidgets.QPushButton(self.Sets)
        self.Del.setGeometry(QtCore.QRect(155, 530, 270, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Del.setFont(font)
        self.Del.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Del.setObjectName("Del")
        self.Del2 = QtWidgets.QPushButton(self.Bool)
        self.Del2.setGeometry(QtCore.QRect(155, 530, 360, 90))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.Del2.setFont(font)
        self.Del2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.Del2.setObjectName("Del2")
        self.En = QtWidgets.QPushButton(self.Sets)
        self.En.setGeometry(QtCore.QRect(845, 190, 70, 70))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.En.setFont(font)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("pics\Enter2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.En.setIcon(icon3)
        self.En.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.En.setObjectName("En")
        self.En2 = QtWidgets.QPushButton(self.Bool)
        self.En2.setGeometry(QtCore.QRect(845, 190, 70, 70))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(40)
        self.En2.setFont(font)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("pics\Enter2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.En2.setIcon(icon4)
        self.En2.setStyleSheet("color:white; border: 2px solid white; border-radius: 10;")
        self.En2.setObjectName("En2")

        self.stackedWidget.addWidget(self.Sets)
        MainWindow.setCentralWidget(self.centralwidget)
        self.stackedWidget.setCurrentWidget(self.home)

        

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CDMCalculator"))


        self.btn2.setText(_translate("MainWindow", "Boolean Algebra"))
        self.btn1.setText(_translate("MainWindow", "Set Algebra"))
        self.label2.setText(_translate("MainWindow", "Choose the type of calculator"))
        self.VarA.setText(_translate("MainWindow", "A"))
        self.VarB.setText(_translate("MainWindow", "B"))
        self.VarC.setText(_translate("MainWindow", "C"))
        self.arg1_2.setText(_translate("MainWindow", "("))
        self.VarD.setText(_translate("MainWindow", "D"))
        self.VarE.setText(_translate("MainWindow", "E"))
        self.VarF.setText(_translate("MainWindow", "F"))
        self.Negation.setText(_translate("MainWindow", "~"))
        self.Disj.setText(_translate("MainWindow", "^"))
        self.Conj.setText(_translate("MainWindow", "v"))
        self.equal_2.setText(_translate("MainWindow", "="))
        self.equal_2.setEnabled(False)
        self.arg2_2.setText(_translate("MainWindow", ")"))
        self.Val1.setText(_translate("MainWindow", "1"))
        self.Val0.setText(_translate("MainWindow", "0"))
        self.Home.setText(_translate("MainWindow", "HOME"))
        self.SetA.setText(_translate("MainWindow", "A"))
        self.SetB.setText(_translate("MainWindow", "B"))
        self.SetC.setText(_translate("MainWindow", "C"))
        self.SetD.setText(_translate("MainWindow", "D"))
        self.SetE.setText(_translate("MainWindow", "E"))
        self.SetF.setText(_translate("MainWindow", "F"))
        self.Complement.setText(_translate("MainWindow", "~"))
        self.Union.setText(_translate("MainWindow", "∩"))
        self.Intersection.setText(_translate("MainWindow", "∪"))
        self.arg1.setText(_translate("MainWindow", "("))
        self.arg2.setText(_translate("MainWindow", ")"))
        self.equal.setText(_translate("MainWindow", "="))
        self.equal.setEnabled(False)
        self.Home_2.setText(_translate("MainWindow", "HOME"))
        self.Del.setText(_translate("MainWindow", "Delete"))
        self.Del2.setText(_translate("MainWindow", "Delete"))
        self.Reset.setText(_translate("MainWindow","C"))
        self.Reset2.setText(_translate("MainWindow", "C"))
        self.minus.setText(_translate("MainWindow", "-"))

        self.offButton.clicked.connect(self.Off)
        self.btn1.clicked.connect(self.gotoSet)
        self.btn2.clicked.connect(self.gotoBool)
        self.Home.clicked.connect(self.goHome)
        self.Home_2.clicked.connect(self.goHome)

        self.SetA.clicked.connect(self.addSetA)
        self.SetB.clicked.connect(self.addSetB)
        self.SetC.clicked.connect(self.addSetC)
        self.SetD.clicked.connect(self.addSetD)
        self.SetE.clicked.connect(self.addSetE)
        self.SetF.clicked.connect(self.addSetF)
        self.arg1.clicked.connect(self.addArg1)
        self.arg2.clicked.connect(self.addArg2)
        self.Complement.clicked.connect(self.addCompl)
        self.Intersection.clicked.connect(self.addIntersc)
        self.Union.clicked.connect(self.addUnion)
        self.equal.clicked.connect(self.CalcSet)
        self.minus.clicked.connect(self.min)
        self.vvod.returnPressed.connect(self.GO)
        self.En.clicked.connect(self.Entrance)
        self.Del.clicked.connect(self.Delete)
        self.Reset.clicked.connect(self.res)




        self.VarA.clicked.connect(self.addA)
        self.VarB.clicked.connect(self.addB)
        self.VarC.clicked.connect(self.addC)
        self.VarD.clicked.connect(self.addD)
        self.VarE.clicked.connect(self.addE)
        self.VarF.clicked.connect(self.addF)
        self.Del2.clicked.connect(self.Delete2)
        self.En2.clicked.connect(self.Entrance2)
        self.Negation.clicked.connect(self.Neg)
        self.Conj.clicked.connect(self.Conjunct)
        self.Disj.clicked.connect(self.Disjunct)
        self.arg1_2.clicked.connect(self.addArg1_2)
        self.arg2_2.clicked.connect(self.addArg2_2)
        self.Reset2.clicked.connect(self.res2)
        self.Val1.clicked.connect(self.val1)
        self.Val1.setEnabled(False)
        self.Val0.clicked.connect(self.val0)
        self.Val0.setEnabled(False)
        self.equal_2.clicked.connect(self.CalcVar)



    def addSetA(self):
        self.stroka.setText(self.stroka.text()+ self.SetA.text())
    def addSetB(self):
        self.stroka.setText(self.stroka.text()+ self.SetB.text())
    def addSetC(self):
        self.stroka.setText(self.stroka.text()+ self.SetC.text())
    def addSetD(self):
        self.stroka.setText(self.stroka.text()+ self.SetD.text())
    def addSetE(self):
        self.stroka.setText(self.stroka.text()+ self.SetE.text())
    def addSetF(self):
        self.stroka.setText(self.stroka.text()+ self.SetF.text())
    def addArg1(self):
        self.stroka.setText(self.stroka.text()+ self.arg1.text())
    def addArg2(self):
        self.stroka.setText(self.stroka.text()+ self.arg2.text())
    def addCompl(self):
        self.stroka.setText(self.stroka.text()+ self.Complement.text())
    def addIntersc(self):
        self.stroka.setText(self.stroka.text()+ self.Intersection.text())
    def addUnion(self):
        self.stroka.setText(self.stroka.text()+ self.Union.text())
    def min(self):
        self.stroka.setText(self.stroka.text()+ self.minus.text())
    def Delete(self):
        self.stroka.setText(self.stroka.text()[:-1])

    def Entrance(self):
        if self.stroka.text() != "":
            self.i = 0
            self.formula = self.stroka.text()
            for i in self.formula:
                if (i != "~") and (i != "∩") and (i != "∪") and (i != "(") and (i != ")") and (i!= "-"):
                    self.dic[i] = set()
            Arr = list(self.dic.keys())
            self.zapros.setText("Enter the set "+ Arr[self.i]+ ", using coma")
            self.En.setEnabled(False)
    def GO(self): 
        Arr = list(self.dic.keys())
        self.dic[Arr[self.i]] = set(self.vvod.text().split(","))
        self.U = self.U.union(self.dic[Arr[self.i]])
        self.i += 1
        try:
            self.zapros.setText("Enter the set "+ Arr[self.i] + ", using coma")
        except IndexError:
            self.zapros.setText("Enter the set "+ Arr[self.i-1] + ", using coma")
            self.zapros.setText("Press the '=' button")
            self.equal.setEnabled(True)
        self.vvod.setText("")
    def res(self):
        self.dic = {}
        self.formula = ""
        self.stroka.setText("")
        self.zapros.setText("")
        self.vvod.setText("")
        self.U.clear()
        self.equal.setEnabled(False)
        self.En.setEnabled(True)
    def CalcSet(self):
        print(self.dic)
        pr = {"~": 3, "∩": 2, "∪": 1, "-": 0}
        Sets = []
        Operations = []
        Arr = list(self.dic.keys())
        def Union(x, y):
            x = x.union(y)
            return x
        def Intersection(x, y):
            x = x.intersection(y)
            return x
        def Difference(x, y):
            x = x.difference(y)
            return x
        def Complement(x):
            x = self.U.difference(x)
            return x
        def Algorythm():
            if len(Operations) != 0:
                if Operations[len(Operations) - 1] != "(":
                    if pr[i] <= pr[Operations[len(Operations) - 1]]:
                        if Operations[len(Operations) - 1] == "~":
                            self.dic["not" + Sets[len(Sets) - 1]] = Complement(self.dic[Sets[len(Sets) - 1]])
                            Sets[len(Sets) - 1] = "not" + Sets[len(Sets) - 1]
                            Operations.pop(len(Operations) - 1)
                            Algorythm()
                    if len(Operations) != 0:
                        if Operations[len(Operations) - 1] == "∩":
                            self.dic["intrsc" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Intersection(self.dic[Sets[len(Sets)-2]],self.dic[Sets[len(Sets)-1]])
                            Sets[len(Sets) - 2] = "intrsc" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                            Sets.pop(len(Sets) - 1)
                            Operations.pop(len(Operations) - 1)
                            Algorythm()
                    if len(Operations) != 0:
                        if Operations[len(Operations) - 1] == "∪":
                            self.dic["un" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Union(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                            Sets[len(Sets) - 2] = "un" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                            Sets.pop(len(Sets) - 1)
                            Operations.pop(len(Operations) - 1)
                            Algorythm()
                    if len(Operations) != 0:
                        if Operations[len(Operations) - 1] == "-":
                            self.dic["dif" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Difference(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                            Sets[len(Sets) - 2] = "dif" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                            Sets.pop(len(Sets) - 1)
                            Operations.pop(len(Operations) - 1)
                            Algorythm()
        def Algorythm1():
            if Operations[len(Operations) - 1] == "~":
                self.dic["not" + Sets[len(Sets) - 1]] = Complement(self.dic[Sets[len(Sets) - 1]])
                Sets[len(Sets) - 1] = "not" + Sets[len(Sets) - 1]
                Operations.pop(len(Operations) - 1)
                Algorythm1()
            elif Operations[len(Operations) - 1] == "∩":
                self.dic["intrsc" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Intersection(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                Sets[len(Sets) - 2] = "intrsc" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                Sets.pop(len(Sets) - 1)
                Operations.pop(len(Operations) - 1)
                Algorythm1()
            elif Operations[len(Operations) - 1] == "∪":
                self.dic["un" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Union(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                Sets[len(Sets) - 2] = "un" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                Sets.pop(len(Sets) - 1)
                Operations.pop(len(Operations) - 1)
                Algorythm1()
            elif Operations[len(Operations) - 1] == "-":
                self.dic["dif" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Difference(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                Sets[len(Sets) - 2] = "dif" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                Sets.pop(len(Sets) - 1)
                Operations.pop(len(Operations) - 1)
                Algorythm1()
            elif Operations[len(Operations) - 1] == "(":
                Operations.pop(len(Operations) - 1)
        def Algorythm2():
            if len(Operations) == 0:
                if self.dic[Sets[0]] == set():
                    self.stroka.setText("The result is empty set")
                else:
                    self.stroka.setText(str(list(self.dic[Sets[0]])))
            else:
                if Operations[len(Operations) - 1] == "~":
                    self.dic["not" + Sets[len(Sets) - 1]] = Complement(self.dic[Sets[len(Sets) - 1]])
                    Sets[len(Sets) - 1] = "not" + Sets[len(Sets) - 1]
                    Operations.pop(len(Operations) - 1)
                    Algorythm2()
                elif Operations[len(Operations) - 1] == "∩":
                    self.dic["intrsc" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Intersection(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                    Sets[len(Sets) - 2] = "intrsc" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                    Sets.pop(len(Sets) - 1)
                    Operations.pop(len(Operations) - 1)
                    Algorythm2()
                elif Operations[len(Operations) - 1] == "∪":
                    self.dic["un" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Union(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                    Sets[len(Sets) - 2] = "un" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                    Sets.pop(len(Sets) - 1)
                    Operations.pop(len(Operations) - 1)
                    Algorythm2()
                elif Operations[len(Operations) - 1] == "-":
                    self.dic["dif" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]] = Difference(self.dic[Sets[len(Sets) - 2]],self.dic[Sets[len(Sets) - 1]])
                    Sets[len(Sets) - 2] = "dif" + Sets[len(Sets) - 2] + Sets[len(Sets) - 1]
                    Sets.pop(len(Sets) - 1)
                    Operations.pop(len(Operations) - 1)
                    Algorythm2()
        for i in self.formula:
            if i in Arr:
                Sets.append(i)
            elif i == "(":
                Operations.append(i)
            elif i == ")":
                Algorythm1()
            elif len(Operations) == 0:
                Operations.append(i)
            elif i == "~" or i == "∩" or i == "∪" or i == "-":
                if Operations[len(Operations) - 1] == "(":
                    Operations.append(i)
                elif pr[i] > pr[Operations[len(Operations) - 1]]:
                    Operations.append(i)
                else:
                    Algorythm()
                    Operations.append(i)
        if Operations != []:
            while Operations != []:
                Algorythm2()



    def addA(self):
        self.stroka_2.setText(self.stroka_2.text() + self.VarA.text())
    def addB(self):
        self.stroka_2.setText(self.stroka_2.text() + self.VarB.text())
    def addC(self):
        self.stroka_2.setText(self.stroka_2.text() + self.VarC.text())
    def addD(self):
        self.stroka_2.setText(self.stroka_2.text() + self.VarD.text())
    def addE(self):
        self.stroka_2.setText(self.stroka_2.text() + self.VarE.text())
    def addF(self):
        self.stroka_2.setText(self.stroka_2.text() + self.VarF.text())
    def Neg(self):
        self.stroka_2.setText(self.stroka_2.text() + self.Negation.text())
    def Conjunct(self):
        self.stroka_2.setText(self.stroka_2.text() + self.Conj.text())
    def Disjunct(self):
        self.stroka_2.setText(self.stroka_2.text() + self.Disj.text())
    def addArg1_2(self):
        self.stroka_2.setText(self.stroka_2.text() + self.arg1_2.text())
    def addArg2_2(self):
        self.stroka_2.setText(self.stroka_2.text() + self.arg2_2.text())
    def Delete2(self):
        self.stroka_2.setText(self.stroka_2.text()[:-1])

    def res2(self):
        self.dic2 = {}
        self.formula2 = ""
        self.stroka_2.setText("")
        self.zapros_2.setText("")
        self.equal_2.setEnabled(False)
        self.Val0.setEnabled(False)
        self.Val1.setEnabled(False)
        self.En2.setEnabled(True)
    def Entrance2(self):
        if self.stroka_2.text() != "":
            self.i2 = 0
            self.formula2 = self.stroka_2.text()
            for i in self.formula2:
                if (i != "~") and (i != "^") and (i != "v") and (i != "(") and (i != ")") :
                    self.dic2[i] = True
            Arr = list(self.dic2.keys())
            self.zapros_2.setText("Enter the variable " + Arr[self.i2])
            self.Val0.setEnabled(True)
            self.Val1.setEnabled(True)
            self.En2.setEnabled(False)
    def val1(self):
        Arr = list(self.dic2.keys())
        self.i2 += 1
        try:
            self.zapros_2.setText("Enter the variable " + Arr[self.i2])
        except IndexError:
            self.zapros_2.setText("Push the '=' button")
            self.equal_2.setEnabled(True)
    def val0(self):
        Arr = list(self.dic2.keys())
        self.dic2[Arr[self.i2]] = False
        self.i2 += 1
        try:
            self.zapros_2.setText("Enter the variable " + Arr[self.i2])
        except IndexError:
            self.zapros_2.setText("Push the '=' button")
            self.equal_2.setEnabled(True)
    def CalcVar(self):
        pr = {"~": 3, "^": 2, "v": 1}
        Vars = []
        Ops = []
        def Con(x, y):
                x = x and y
                return x

        def Dis(x, y):
                x = x or y
                return x

        def Neg(x):
                x = not x
                return x
        def A():
            if len(Ops) != 0:
                if Ops[len(Ops) - 1] != "(":
                    if pr[i] <= pr[Ops[len(Ops) - 1]]:
                        if Ops[len(Ops) - 1] == "~":
                            self.dic2["not" + Vars[len(Vars) - 1]] = Neg(self.dic2[Vars[len(Vars) - 1]])
                            Vars[len(Vars) - 1] = "not" + Vars[len(Vars) - 1]
                            Ops.pop(len(Ops) - 1)
                            A()
                    if len(Ops) != 0:
                        if Ops[len(Ops) - 1] == "^":
                            self.dic2["Con" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]] = Con(self.dic2[Vars[len(Vars) - 2]], self.dic2[Vars[len(Vars) - 1]])
                            Vars[len(Vars) - 2] = "Con" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]
                            Vars.pop(len(Vars) - 1)
                            Ops.pop(len(Ops) - 1)
                            A()
                    if len(Ops) != 0:
                        if Ops[len(Ops) - 1] == "v":
                            self.dic2["Dis" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]] = Dis(self.dic2[Vars[len(Vars) - 2]], self.dic2[Vars[len(Vars) - 1]])
                            Vars[len(Vars) - 2] = "Dis" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]
                            Vars.pop(len(Vars) - 1)
                            Ops.pop(len(Ops) - 1)
                            A()
        def A1():
            if Ops[len(Ops) - 1] == "~":
                self.dic2["not" + Vars[len(Vars) - 1]] = Neg(self.dic2[Vars[len(Vars) - 1]])
                Vars[len(Vars) - 1] = "not" + Vars[len(Vars) - 1]
                Ops.pop(len(Ops) - 1)
                A1()
            elif Ops[len(Ops) - 1] == "^":
                self.dic2["Con" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]] = Con(self.dic2[Vars[len(Vars) - 2]],self.dic2[Vars[len(Vars) - 1]])
                Vars[len(Vars) - 2] = "Con" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]
                Vars.pop(len(Vars) - 1)
                Ops.pop(len(Ops) - 1)
                A1()
            elif Ops[len(Ops) - 1] == "v":
                self.dic2["Dis" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]] = Dis(self.dic2[Vars[len(Vars) - 2]],self.dic2[Vars[len(Vars) - 1]])
                Vars[len(Vars) - 2] = "Dis" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]
                Vars.pop(len(Vars) - 1)
                Ops.pop(len(Ops) - 1)
                A1()
            elif Ops[len(Ops) - 1] == "(":
                Ops.pop(len(Ops) - 1)
        def A2():
            if len(Ops) == 0:
                if self.dic2[Vars[0]] == True:
                    self.stroka_2.setText("The result is: 1")
                else:
                    self.stroka_2.setText("The result is: 0")
            else:
                if Ops[len(Ops) - 1] == "~":
                    self.dic2["not" + Vars[len(Vars) - 1]] = Neg(self.dic2[Vars[len(Vars) - 1]])
                    Vars[len(Vars) - 1] = "not" + Vars[len(Vars) - 1]
                    Ops.pop(len(Ops) - 1)
                    A2()
                elif Ops[len(Ops) - 1] == "^":
                    self.dic2["Con" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]] = Con(self.dic2[Vars[len(Vars) - 2]],self.dic2[Vars[len(Vars) - 1]])
                    Vars[len(Vars) - 2] = "Con" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]
                    Vars.pop(len(Vars) - 1)
                    Ops.pop(len(Ops) - 1)
                    A2()
                elif Ops[len(Ops) - 1] == "v":
                    self.dic2["Dis" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]] = Dis(self.dic2[Vars[len(Vars) - 2]],self.dic2[Vars[len(Vars) - 1]])
                    Vars[len(Vars) - 2] = "Dis" + Vars[len(Vars) - 2] + Vars[len(Vars) - 1]
                    Vars.pop(len(Vars) - 1)
                    Ops.pop(len(Ops) - 1)
                    A2()

        for i in self.formula2:
            if i in list(self.dic2.keys()):
                Vars.append(i)
            elif i == "(":
                Ops.append(i)
            elif i == ")":
                A1()
            elif len(Ops) == 0:
                Ops.append(i)
            elif i == "~" or i == "^" or i == "v":
                if Ops[len(Ops) - 1] == "(":
                    Ops.append(i)
                elif pr[i] > pr[Ops[len(Ops) - 1]]:
                    Ops.append(i)
                else:
                    A()
                    Ops.append(i)
        if Ops != []:
            while Ops != []:
                A2()



    def Off(self):
        sys.exit(app.exec_())
    def gotoSet(self):
        self.stackedWidget.setCurrentWidget(self.Sets)
    def gotoBool(self):
        self.stackedWidget.setCurrentWidget(self.Bool)
    def goHome(self):
        self.stackedWidget.setCurrentWidget(self.home)
        self.dic2 = {}
        self.formula2 = ""
        self.stroka_2.setText("")
        self.zapros_2.setText("")
        self.dic = {}
        self.formula = ""
        self.stroka.setText("")
        self.zapros.setText("")
        self.vvod.setText("")
        self.U.clear()
        self.equal_2.setEnabled(False)
        self.Val0.setEnabled(False)
        self.Val1.setEnabled(False)
        self.En2.setEnabled(True)
    

    formula = ""
    formula2 = ""
    dic2 ={}
    dic = {}
    i = 0
    U = set()
    i2 = 0
        



    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
